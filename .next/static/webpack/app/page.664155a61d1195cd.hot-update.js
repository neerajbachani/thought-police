"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/page",{

/***/ "(app-pages-browser)/./src/lib/services/analysisService.ts":
/*!*********************************************!*\
  !*** ./src/lib/services/analysisService.ts ***!
  \*********************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AnalysisService: () => (/* binding */ AnalysisService),\n/* harmony export */   analysisService: () => (/* binding */ analysisService)\n/* harmony export */ });\n/* harmony import */ var _cacheService__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./cacheService */ \"(app-pages-browser)/./src/lib/services/cacheService.ts\");\n/* harmony import */ var _tokenBudget__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./tokenBudget */ \"(app-pages-browser)/./src/lib/services/tokenBudget.ts\");\n\n\nclass AnalysisService {\n    setVerbose(verbose) {\n        this.verbose = verbose;\n    }\n    debug() {\n        for(var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++){\n            args[_key] = arguments[_key];\n        }\n        if (this.verbose) {\n            console.log('[AnalysisService]', ...args);\n        }\n    }\n    async analyzeUser(username) {\n        let analyzerUserId = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : '1';\n        try {\n            var _reportData_contradictions;\n            // Validate username\n            if (!username || username.trim().length === 0) {\n                throw new Error('Username is required');\n            }\n            const cleanUsername = username.trim().replace(/^u\\//, '');\n            this.debug(\"Starting analysis for \".concat(cleanUsername, \" via server API\"));\n            // Check budget status\n            const budgetStatus = _tokenBudget__WEBPACK_IMPORTED_MODULE_1__.tokenBudget.getBudgetStatus();\n            this.debug('Budget status:', budgetStatus);\n            if (budgetStatus.isWarning) {\n                console.warn(\"Budget warning: \".concat(budgetStatus.percentage.toFixed(1), \"% used\"));\n            }\n            // Call server-side API for analysis\n            const response = await fetch('/api/analyze', {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json',\n                    'HTTP-Referer':  true ? window.location.origin : 0\n                },\n                body: JSON.stringify({\n                    username: cleanUsername,\n                    verbose: this.verbose\n                })\n            });\n            if (!response.ok) {\n                const errorData = await response.json().catch(()=>({\n                        error: 'Unknown error'\n                    }));\n                throw new Error(errorData.error || \"Analysis failed with status \".concat(response.status));\n            }\n            const reportData = await response.json();\n            // Create analysis result\n            const analysis = {\n                id: \"analysis-\".concat(Date.now(), \"-\").concat(cleanUsername),\n                targetUsername: cleanUsername,\n                analyzerUserId,\n                contradictionsFound: ((_reportData_contradictions = reportData.contradictions) === null || _reportData_contradictions === void 0 ? void 0 : _reportData_contradictions.length) || 0,\n                confidenceScore: this.calculateWeightedConfidence(reportData.contradictions || []),\n                analysisDate: new Date().toISOString(),\n                reportData,\n                status: 'completed'\n            };\n            this.debug(\"Analysis complete for \".concat(cleanUsername, \":\"), {\n                contradictionsFound: analysis.contradictionsFound,\n                weightedConfidence: analysis.confidenceScore,\n                status: analysis.status\n            });\n            return analysis;\n        } catch (error) {\n            this.debug('Analysis failed:', error);\n            // Return failed analysis with error info\n            return {\n                id: \"analysis-failed-\".concat(Date.now()),\n                targetUsername: username,\n                analyzerUserId,\n                contradictionsFound: 0,\n                confidenceScore: 0,\n                analysisDate: new Date().toISOString(),\n                reportData: {\n                    summary: \"Analysis failed: \".concat(error instanceof Error ? error.message : 'Unknown error occurred'),\n                    contradictions: [],\n                    timeline: [],\n                    stats: {\n                        totalComments: 0,\n                        timespan: '0 days',\n                        topSubreddits: [],\n                        sentimentTrend: 0\n                    }\n                },\n                status: 'failed'\n            };\n        }\n    }\n    calculateWeightedConfidence(contradictions) {\n        if (contradictions.length === 0) return 0;\n        // Weight by recency and verification status\n        let totalWeight = 0;\n        let weightedSum = 0;\n        for (const contradiction of contradictions){\n            let weight = 1;\n            // Higher weight for verified contradictions\n            if (contradiction.verified) {\n                weight *= 1.5;\n            }\n            // Higher weight for recent contradictions\n            if (contradiction.dates && contradiction.dates.length >= 2) {\n                const dates = contradiction.dates.map((d)=>new Date(d).getTime());\n                const avgDate = (dates[0] + dates[1]) / 2;\n                const ageInDays = (Date.now() - avgDate) / (24 * 60 * 60 * 1000);\n                if (ageInDays < 30) {\n                    weight *= 1.3; // Recent contradictions are more significant\n                } else if (ageInDays > 365) {\n                    weight *= 0.8; // Older contradictions less significant\n                }\n            }\n            // Weight by confidence score\n            const confidenceScore = contradiction.confidenceScore || 50;\n            weight *= confidenceScore / 100;\n            weightedSum += confidenceScore * weight;\n            totalWeight += weight;\n        }\n        return Math.round(weightedSum / totalWeight);\n    }\n    async validateUsername(username) {\n        try {\n            const cleanUsername = username.trim().replace(/^u\\//, '');\n            const response = await fetch(\"/api/reddit/user/\".concat(cleanUsername, \"/about.json\"));\n            return response.ok;\n        } catch (e) {\n            return false;\n        }\n    }\n    async getUserPreview(username) {\n        try {\n            var _commentsData_data_children, _commentsData_data;\n            const cleanUsername = username.trim().replace(/^u\\//, '');\n            // Get user info\n            const userResponse = await fetch(\"https://thoughtpolice.vercel.app/api/reddit/user/\".concat(cleanUsername, \"/about.json\"));\n            console.log('User preview response:', userResponse);\n            if (!userResponse.ok) {\n                return {\n                    exists: false,\n                    karma: 0,\n                    accountAge: 'Unknown',\n                    recentActivity: false,\n                    estimatedComments: 0\n                };\n            }\n            const userData = await userResponse.json();\n            const user = userData.data;\n            // Get a small sample of comments to check for recent activity\n            const commentsResponse = await fetch(\"/api/reddit/user/\".concat(cleanUsername, \"/comments.json?limit=5\"));\n            const commentsData = commentsResponse.ok ? await commentsResponse.json() : null;\n            const hasRecentActivity = (commentsData === null || commentsData === void 0 ? void 0 : (_commentsData_data = commentsData.data) === null || _commentsData_data === void 0 ? void 0 : (_commentsData_data_children = _commentsData_data.children) === null || _commentsData_data_children === void 0 ? void 0 : _commentsData_data_children.length) > 0;\n            const accountAge = Math.floor((Date.now() / 1000 - user.created_utc) / (24 * 60 * 60));\n            const ageString = accountAge < 30 ? \"\".concat(accountAge, \" days\") : accountAge < 365 ? \"\".concat(Math.floor(accountAge / 30), \" months\") : \"\".concat(Math.floor(accountAge / 365), \" years\");\n            // Better estimation based on karma and account age\n            const dailyKarma = user.comment_karma / Math.max(accountAge, 1);\n            const estimatedComments = Math.min(Math.max(dailyKarma * 2, 100), 8000);\n            return {\n                exists: true,\n                karma: user.total_karma || 0,\n                accountAge: ageString,\n                recentActivity: hasRecentActivity,\n                estimatedComments: Math.floor(estimatedComments)\n            };\n        } catch (error) {\n            this.debug('getUserPreview failed:', error);\n            return {\n                exists: false,\n                karma: 0,\n                accountAge: 'Unknown',\n                recentActivity: false,\n                estimatedComments: 0\n            };\n        }\n    }\n    // Enhanced cache management\n    clearUserCache(username) {\n        const cleanUsername = username.trim().replace(/^u\\//, '');\n        _cacheService__WEBPACK_IMPORTED_MODULE_0__.cacheService.clearAnalysis(cleanUsername);\n    }\n    getCacheStats() {\n        return _cacheService__WEBPACK_IMPORTED_MODULE_0__.cacheService.getStats();\n    }\n    getBudgetStats() {\n        return {\n            budget: _tokenBudget__WEBPACK_IMPORTED_MODULE_1__.tokenBudget.getBudgetStatus(),\n            usage: _tokenBudget__WEBPACK_IMPORTED_MODULE_1__.tokenBudget.getUsageStats()\n        };\n    }\n    resetBudget() {\n        _tokenBudget__WEBPACK_IMPORTED_MODULE_1__.tokenBudget.resetBudget();\n    }\n    setBudget(maxDollar) {\n        let warningThreshold = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 80;\n        _tokenBudget__WEBPACK_IMPORTED_MODULE_1__.tokenBudget.setBudget({\n            maxDollar,\n            warningThreshold\n        });\n    }\n    // Debug and monitoring methods\n    getDebugInfo() {\n        return {\n            cache: _cacheService__WEBPACK_IMPORTED_MODULE_0__.cacheService.getDebugInfo(),\n            budget: this.getBudgetStats(),\n            verbose: this.verbose\n        };\n    }\n    // Streaming analysis for large datasets\n    async *analyzeUserStream(username) {\n        const cleanUsername = username.trim().replace(/^u\\//, '');\n        yield {\n            stage: 'validation',\n            progress: 0\n        };\n        try {\n            // Validate user\n            const isValid = await this.validateUsername(cleanUsername);\n            if (!isValid) {\n                throw new Error('User not found');\n            }\n            yield {\n                stage: 'validation',\n                progress: 100\n            };\n            // Get user preview\n            yield {\n                stage: 'fetching',\n                progress: 0\n            };\n            const preview = await this.getUserPreview(cleanUsername);\n            yield {\n                stage: 'fetching',\n                progress: 50,\n                data: preview\n            };\n            // Perform analysis\n            yield {\n                stage: 'analyzing',\n                progress: 0\n            };\n            const analysis = await this.analyzeUser(cleanUsername);\n            yield {\n                stage: 'analyzing',\n                progress: 100,\n                data: analysis.reportData\n            };\n            // Complete\n            yield {\n                stage: 'complete',\n                progress: 100,\n                data: analysis.reportData\n            };\n        } catch (error) {\n            yield {\n                stage: 'error',\n                progress: 0,\n                data: {\n                    error: error instanceof Error ? error.message : 'Unknown error'\n                }\n            };\n        }\n    }\n    // Batch analysis for multiple users\n    async analyzeBatch(usernames) {\n        const results = [];\n        for (const username of usernames){\n            try {\n                const analysis = await this.analyzeUser(username);\n                results.push(analysis);\n                // Add delay between analyses to respect rate limits\n                await new Promise((resolve)=>setTimeout(resolve, 2000));\n            } catch (error) {\n                this.debug(\"Batch analysis failed for \".concat(username, \":\"), error);\n            // Continue with other users even if one fails\n            }\n        }\n        return results;\n    }\n    // Get cached analysis if available\n    getCachedAnalysis(username) {\n        const cleanUsername = username.trim().replace(/^u\\//, '');\n        // This would need to be implemented based on your cache structure\n        // For now, return null to indicate no cached analysis\n        return null;\n    }\n    // Health check for the analysis service\n    async healthCheck() {\n        const services = {\n            reddit: false,\n            openrouter: false,\n            cache: true // Cache is always available locally\n        };\n        // Test Reddit API\n        try {\n            const response = await fetch('/api/reddit/r/test.json', {\n                method: 'HEAD'\n            });\n            services.reddit = response.ok;\n        } catch (e) {\n            services.reddit = false;\n        }\n        // Test OpenRouter (would need a test endpoint)\n        try {\n            const response = await fetch('/api/analyze', {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json'\n                },\n                body: JSON.stringify({\n                    username: 'test',\n                    healthCheck: true\n                })\n            });\n            services.openrouter = response.status !== 500;\n        } catch (e) {\n            services.openrouter = false;\n        }\n        const budget = this.getBudgetStats();\n        const healthyServices = Object.values(services).filter(Boolean).length;\n        let status;\n        if (healthyServices === 3) {\n            status = 'healthy';\n        } else if (healthyServices >= 2) {\n            status = 'degraded';\n        } else {\n            status = 'unhealthy';\n        }\n        return {\n            status,\n            services,\n            budget\n        };\n    }\n    constructor(){\n        this.verbose = false;\n    }\n}\nconst analysisService = new AnalysisService();\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/lib/services/analysisService.ts\n"));

/***/ })

});